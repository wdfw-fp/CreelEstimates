---
title: "Freshwater Creel Progress Report" 
date: last-modified
params:
  project_name: "District 17 North"
  fishery_name: "Wynoochee winter steelhead 2024-25"
  est_date_start: "2024-12-01"
  est_date_end: "2025-01-21"
execute: 
  warning: false
  echo: false
format: 
  html: 
    page-layout: full 
    code-tools: true
    embed-resources: true
    toc: false
    title-block-banner: "#1D886E"
    css: "style.css"
---

**`{r} paste(params$project_name, "â€”", params$fishery_name)`**

[*Disclaimer: The information presented here is provisional. This data has not been fully processed or quality assured, and is therefore subject to change.*]{style="font-size: 14px;"}

------------------------------------------------------------------------

```{r setup, include=FALSE}
options(scipen=999) #prevent scientific notation

library(tidyverse)
library(here)
library(cli)
library(glue)
library(gt)
```

```{r}
#load functions
purrr::walk(list.files(here("R_functions"), full.names = T), source)

#Import a set of creel estimates processed through ETL
file_path <- paste0(here::here(),"/fishery_analyses/", params$project_name, "/", params$fishery_name, "/")
load(file = paste0(file_path, "creel_estimates.RData"))

```

```{r, fetch_dataset, include=FALSE}
#download empirical data
raw_data <- tryCatch(
  {
    invisible(fetch_dwg(params$fishery_name))
  },
  error = function(e) {
    stop("Error occurred while fetching the data: ")
  } 
)

#filter dataset to parameter dates
raw_data$effort <- raw_data$effort |> 
  dplyr::filter(
    event_date >= as.Date(params$est_date_start) & 
    event_date <= as.Date(params$est_date_end)
  )

raw_data$interview <- raw_data$interview |> 
    dplyr::filter(
    event_date >= as.Date(params$est_date_start) & 
    event_date <= as.Date(params$est_date_end)
  )

join <- raw_data$interview |> 
  dplyr::select(interview_id, event_date)

raw_data$catch <- raw_data$catch |> 
  dplyr::left_join(join, by = "interview_id") |> 
  dplyr::filter(
    event_date >= as.Date(params$est_date_start) & 
    event_date <= as.Date(params$est_date_end)
  )

```

::: {.callout-warning appearance="simple"}
## Fishery Metrics and Controls

```{r}
#import controls file
creel_fishery_metrics <- readr::read_csv(here::here("./input_files/creel_fishery_metrics.csv")) |> 
  dplyr::filter(
    project == params$project_name,
    fishery == params$fishery_name
  )

#check if file is empty
if (nrow(creel_fishery_metrics) == 0) {
  cat("There are no pre-season fishery controls input for this dataset.\n")
} else {
  #create object if file not empty
  metric_match <- creel_fishery_metrics |> 
    dplyr::filter(estimate_catch_group %in% total_catch$est_cg)

  #if there are pre-season fishery controls, report in table
  if (exists("metric_match") && nrow(metric_match > 0)) {
    dynamic_metric_label <- unique(metric_match$metric)
  
    metric_table <- metric_match |> 
      dplyr::inner_join(
        total_catch,
        by = c("estimate_catch_group" = "est_cg")
      ) |> 
      dplyr::select(
        estimate_catch_group,
        value,
        catch_estimate = count
      ) |> 
      dplyr::mutate(estimated_mortalities = catch_estimate * 0.1) |> 
      dplyr::rename_with(
        ~ dynamic_metric_label,
        .cols = value
      ) |> 
      tidyr::pivot_longer(
        cols = c(dynamic_metric_label, catch_estimate, estimated_mortalities),
        names_to = "Metric",
        values_to = "Value"
      )
  
      metric_table_gt <- metric_table |> 
        gt() |> 
        gt::tab_header(
          title = "Catch Estimates and Reference Metrics",
          subtitle = "Grouped by Catch Group"
        ) |> 
        gt::cols_label(
          Metric = "Metric",
          Value = "Value"
        ) |> 
        gt::fmt_number(
          columns = "Value", decimals = 1
        )
      metric_table_gt
  }

}


```
:::

<details>

<summary>Fishery Locations Table (Dropdown)</summary>

::: {style="display: flex; justify-content: center; width: 100%;"}
```{r, results = "asis"}
knitr::kable(raw_data$fishery_manager, format = "html") |> 
kableExtra::row_spec(which(raw_data$fishery_manager$survey_type == "Census"), background = "grey", color = "black") |> 
kableExtra::kable_styling(font_size = 8) |> 
kableExtra::scroll_box(width = "100%", height = "500px")
```
:::

</details>

::: text-center
Sampling date range:
:::

```{r date_range}
#dates table
creel_estimates$stratum |> 
  dplyr::filter(estimate_category == "effort") |> 
  summarise(`Start` = min(min_event_date),
            `End` = max(max_event_date)) |> 
  gt::gt() |> 
  gt::fmt_date(date_style = "yMd")
```

::: text-center
Number of angler interviews by section:
:::

```{r}
#number of interviews
raw_data$interview |>
  filter(between(event_date, as.Date(params$est_date_start), as.Date(params$est_date_end))) |>
  count(section_num) |>
  arrange(section_num) |> 
  gt() |> 
  gt::cols_label(
    section_num ~ "Section Number",
    n ~ "Interview Count"
  )
```

```{r}
weeks_list <- as.vector(unique(dwg$days$period))
```

::: columns
::: column
```{r catch_cumulative_plot}

catch <- creel_estimates$stratum |> 
  dplyr::filter(
    estimate_category == "catch",
    estimate_type == "estimate_stratum"
  ) |> 
  dplyr::select(est_cg, period, estimate_value) |> 
  dplyr::group_by(period) |> 
  dplyr::summarise(total = round(sum(estimate_value), 0)) |> 
  dplyr::mutate(period = factor(period, levels = weeks_list)) |>  # Reorder periods
  dplyr::arrange(period) |>  # Ensure data is sorted by custom order
  dplyr::mutate(cumulative_sum = cumsum(total)) 

catch |> ggplot2::ggplot(aes(x = period, group = )) +
  geom_col(aes(y = total)) +
  geom_line(aes(y=cumulative_sum, group = 1)) +
  scale_y_continuous(
    name = "Total Catch",
    sec.axis = ggplot2::sec_axis(transform = ~ ., name = "Cumulative Catch")
  ) +
  labs(
    title = "Catch and Cumulative Catch by Week",
    x = "Week",
    y = "Total Catch"
  ) +
  theme_classic() +
  theme(axis.text = element_text(size = 12))
```

::: text-center
Estimated total catch using the point estimate (PE) model, aggregated across all sections and dates.
:::

```{r catch_sum}
total_catch <- creel_estimates$stratum |> 
  filter(estimate_category == "catch") |> 
  select(est_cg, estimate_type, estimate_value) |> 
  filter(estimate_type == "estimate_stratum") |> 
  group_by(est_cg) |> 
  summarise(count = sum(round(estimate_value, 0)))
  # pivot_wider(names_from = est_cg, values_from = count) |> 
  # mutate(total = sum(across(everything()))) |> 
total_catch |> 
  gt::gt() |> 
  grand_summary_rows(
    columns = count,
    fns = "sum"
  ) |> 
  cols_label(
    est_cg ~ "Catch Group",
    count ~ "Count"
  )

```
:::

::: column
```{r}
effort  <- creel_estimates$stratum |> 
  dplyr::filter(
    estimate_category == "effort",
    estimate_type == "estimate_stratum"
  ) |> 
  dplyr::select(period, estimate_value) |> 
  dplyr::group_by(period) |> 
  dplyr::summarise(total = round(sum(estimate_value), 0)) |> 
  dplyr::mutate(period = factor(period, levels = weeks_list)) |>  # Reorder periods
  dplyr::arrange(period) |>  # Ensure data is sorted by custom order
  dplyr::mutate(cumulative_sum = cumsum(total)) 

effort |> ggplot2::ggplot(aes(x = period)) +
  geom_col(aes(y = total)) +
  geom_line(aes(y=cumulative_sum, group = 1)) +
  scale_y_continuous(
    name = "Total Effort",
    sec.axis = ggplot2::sec_axis(transform = ~ ., name = "Cumulative Catch")
  ) +
  labs(
    title = "Effort and Cumulative Effort by Week",
    x = "Week",
    y = "Estimated Total Effort"
  ) +
  theme_classic() +
  theme(axis.text = element_text(size = 12))
```

::: text-center
Estimated total effort using the point estimate (PE) model, grouped by section.
:::

```{r effort_sum}
total_effort <- creel_estimates$stratum |> 
  group_by(section_num) |> 
  filter(estimate_category == "effort") |> 
  filter(estimate_type == "angler_hours_mean") |> 
  summarise(hours = sum(round(estimate_value), 1))

total_effort |> 
  gt::gt() |> 
  grand_summary_rows(
    columns = hours,
    fns = "sum"
  ) |> 
  cols_label(
    section_num ~ "Section Number",
    hours ~ "Angler hours"
  )
```

::: text-center
Effort index-census bias correction factors:
:::

```{r}
inputs_pe$paired_census_index_counts |> 
  select(section_num, angler_final, count_census, count_index, TI_expan_final) |> 
  gt(caption = "The season-long sum of paired census and index angler effort counts and corresponding bias-term ratio (TI_expan_final), indicating the magnitude and direction (postive or negative) of bias in index counts relative to census counts") |> 
  fmt_number(count_index, decimals = 0) |> 
  fmt_number(TI_expan_final, decimals = 2)
```
:::
:::

------------------------------------------------------------------------

::: text-center
Total reported encounters in angler interviews to date. <br /> Values represent empirical data and are not expanded estimates of total catch.
:::

::: {.scroll-container style="overflow-y: auto; height: 500px;"}
```{r raw_catch_interview}
#raw catch data
catch_table <- raw_data$interview |> 
  dplyr::left_join(raw_data$catch, by = "interview_id") |> 
  dplyr::filter(!is.na(fish_count)) |> 
  dplyr::select(catch_group, fish_count) |> 
  dplyr::group_by(catch_group) |> 
  dplyr::summarise(count = sum(fish_count))

catch_table |> 
  gt::gt() |> 
  cols_label(
    catch_group ~ "Catch group",
    count ~ "Count"
  )
```
:::
